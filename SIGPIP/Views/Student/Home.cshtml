@using Newtonsoft.Json
@model List<ProjectModel>


@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_LayoutPortfolio.cshtml";
}

<div class="content-wrapper">

    <!-- Content Header (Page header) -->
    <!-- Main content -->

    <section class="content">
        <!--
            <h1>Home</h1>

        <p>Welcome! @ViewBag.studentName</p>
        <p>Yout ID is: @ViewBag.studentIdLogged</p>

        -->

        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Add a New Project</h3>

                <ul class="box-controls pull-right">
                    <li><a class="box-btn-slide" href="#"></a></li>
                </ul>
            </div>
            <div class="box-body">

                @{
                    Guid studentId = Guid.Empty, projectId = Guid.Empty;
                }

                @{
                    studentId = Guid.Parse(ViewBag.studentIdLogged);
                }

                <h4 class="mt-0 mb-20">
                    Do you have a new project completed or under development?. Fill in the following fields and store
                    it, so you can access and/or edit it whenever you want.
                </h4>

                <form asp-action="RegisterStudentProject" asp-controller="Project" method="post" enctype="multipart/form-data" novalidate="novalidate">
                    <input type="hidden" name="studentId" value=@studentId />
                    <input type="hidden" name="projectId" id="projectId" value=@projectId />
                    <div class="row">
                        <div class="col-4">
                            <div class="form-group">
                                <label for="projectName">Name <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectName" id="projectName" class="form-control" required data-validation-required-message="This field is required">
                                </div>
                                @*<input name="projectName" id="projectName" class="form-control" />*@
                                @*<span validation-for="projectName" class="text-danger"></span>*@
                            </div>
                        </div>
                        <div class="col-8">
                            <div class="form-group">
                                <label for="projectDescription">Description <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectDescription" id="projectDescription" class="form-control" required data-validation-required-message="This field is required">
                                </div>
                                @*<span validation-for="projectDescription" class="text-danger"></span>*@
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectLink">Link to find the project</label>
                                <div class="controls">
                                    <input name="projectLink" id="projectLink" class="form-control" placeholder="Add URL"
                                           data-validation-regex-regex="((http[s]?|ftp[s]?):\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*"
                                           data-validation-regex-message="Only Valid URL's">
                                </div>
                                <span validation-for="projectLink" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectRepoLink">Repository link <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectRepoLink" id="projectRepoLink" class="form-control" placeholder="Add URL"
                                           data-validation-regex-regex="((http[s]?|ftp[s]?):\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*"
                                           data-validation-regex-message="Only Valid URL's" required data-validation-required-message="This field is required">
                                </div>
                                <span validation-for="projectRepoLink" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectFramework">Framework or environment used <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectFramework" id="projectFramework" class="form-control" required data-validation-required-message="This field is required">
                                </div>
                                <span validation-for="projectFramework" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectLanguages">Programming languages used (Separated by comma ",") <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectLanguages" id="projectLanguages" class="form-control" required data-validation-required-message="This field is required">
                                </div>
                                <span validation-for="projectLanguages" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <label for="exampleInputFile"><b>Select Image </b><span class="text-danger">*</span></label>
                            <input type="file" class="form-control" name="files" id="files" accept="image/*">
                            <div style="text-align: center;">
                                <br />
                                <img src="#" id="uploadedImage" width="200" height="100" hidden />
                            </div>
                        </div>
                        <div class="col-6">
                            <label for="exampleInputFile"><b>Choose Zip File </b><span class="text-danger">*</span></label>
                            <input type="file" class="form-control" name="files" id="zip" accept=".zip,.rar,.7zip">
                        </div>
                    </div>

                    <button type="submit" id="submitProject" class="btn btn-success pull-right">Upload your Project</button><br />
                </form>
                <button onclick="cancelEdit()" id="cancelEditButton" class="btn btn-danger" hidden>Cancel</button>
                @*<button onclick="cancelEdit()" id="cancelEditButton" hidden>Cancel</button>*@
            </div>
        </div>

        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Your Projects</h3>

                <ul class="box-controls pull-right">
                    <li><a class="box-btn-slide" href="#"></a></li>
                </ul>
            </div>
            <div class="box-body">
                <div>
                    @if (Model.Count == 0)
                    {
                        <div style="text-align: center;">
                            <h2>This is very empty</h2>
                            <h3>*Cricket Sounds*</h3>
                            <h4>
                                To add a new project go to the "Add a New Project" section and start storing and managing
                                all your projects in a quick and easy way.
                            </h4>
                            <img src="https://img.icons8.com/cotton/100/000000/empty-box.png" />
                        </div>
                    }
                    @foreach (var project in Model)
                    {

                        <div>
                            @{
                                string base64String = Convert.ToBase64String(@project.projectImageData, 0, @project.projectImageData.Length);
                                var imageSource = "data:application/pdf;base64," + base64String;
                            }
                            <img src="@imageSource" width="300" height="200" />
                            <h2>@project.projectName</h2>
                            <p>@project.projectDescription</p>
                            <a href="@project.projectLink">Uploaded link</a><br />
                            <a href="@project.projectRepoLink">Uploaded link</a>
                            <p>@project.projectFramework</p>
                            @{
                                string base64StringZip = Convert.ToBase64String(@project.projectZipData, 0, @project.projectZipData.Length);
                            }
                            <button onclick="base64ToArrayBuffer('@base64StringZip', '@project.projectName')" class="btn btn-info">Download Project ZIP</button>
                            @*<button onclick="base64ToArrayBuffer('@base64StringZip', '@project.projectName')">Download project ZIP</button>*@
                            <div>
                                @{
                                    string jsonObject = JsonConvert.SerializeObject(project);
                                }
                                <br />
                                <button onclick="editProject('@jsonObject')" class="btn btn-info">Edit</button>
                                @*<button onclick="editProject('@jsonObject')">Edit</button>*@

                                <button onclick="deleteProject('@project.projectId')" class="btn btn-info">Delete</button>
                                @*<button onclick="deleteProject('@project.projectId')">Delete</button>*@
                            </div>
                        </div>
                        <hr />
                    }
                </div>
            </div>
        </div>
    </section>
</div>


@section scripts {
<script>

    document.getElementById('files').onchange = function(evt){
        var target = evt.target;
        var files = target.files;

        if (FileReader && files && files.length) {
            var fr = new FileReader();
            fr.onload = function () {
                document.getElementById('uploadedImage').removeAttribute('hidden');
                document.getElementById('uploadedImage').src = fr.result;
            }
            fr.readAsDataURL(files[0]);
        }
    }

    function editProject(project){
        var projectToEdit = JSON.parse(project);

        document.getElementById('projectName').setAttribute('value', projectToEdit.projectName);
        document.getElementById('projectDescription').setAttribute('value', projectToEdit.projectDescription);
        document.getElementById('projectLink').setAttribute('value', projectToEdit.projectLink);
        document.getElementById('projectRepoLink').setAttribute('value', projectToEdit.projectRepoLink);
        document.getElementById('projectFramework').setAttribute('value', projectToEdit.projectFramework);
        document.getElementById('projectLanguages').setAttribute('value', projectToEdit.projectLanguages);
        document.getElementById('projectId').setAttribute('value', projectToEdit.projectId);
        document.getElementById('submitProject').setAttribute('value', 'Edit');
        document.getElementById('files').value = "";
        document.getElementById('zip').value = "";
        document.getElementById('cancelEditButton').removeAttribute('hidden');
        document.getElementById('uploadedImage').removeAttribute('hidden');
        document.getElementById('uploadedImage').setAttribute('src', "data:image/png;base64," + projectToEdit.projectImageData);

        $('html, body').animate({ scrollTop: 0 }, 'fast');
    }

    function deleteProject(idProject){
        if (confirm('¿Are you sure you want to delete this project?')) {
            $.ajax({
                type: 'DELETE',
                url: '/Project/DeleteStudentProject',
                data: { projectId: idProject},
                success: function(){
                    window.location.reload();
                }
            })
        }
    }

    function cancelEdit(){
        console.log("cancel");
        document.getElementById('projectName').setAttribute('value', '');
        document.getElementById('projectDescription').setAttribute('value', '');
        document.getElementById('projectLink').setAttribute('value', '');
        document.getElementById('projectRepoLink').setAttribute('value', '');
        document.getElementById('projectFramework').setAttribute('value', '');
        document.getElementById('projectLanguages').setAttribute('value', '');
        document.getElementById('projectId').setAttribute('value', '');
        document.getElementById('submitProject').setAttribute('value', 'Upload');
        document.getElementById('cancelEditButton').setAttribute('hidden', true);
        document.getElementById('uploadedImage').setAttribute('hidden', true);
        document.getElementById('uploadedImage').setAttribute('src', '');
        console.log("cancel2");
    }

    function downloadZip(zipBytes, projectName){

        let blob = new Blob([zipBytes], { type: 'application/zip, application/octet-stream'['content-type'] });
        let objectUrl = URL.createObjectURL(blob);
        let link = document.createElement('a');

        link.href = objectUrl;
        link.download = projectName +".zip";
        link.click();

        window.URL.revokeObjectURL(link.href);
    }

    function base64ToArrayBuffer(base64, projectName) {
        var binary_string = window.atob(base64);
        var len = binary_string.length;
        var bytes = new Uint8Array(len);

        for (var i = 0; i < len; i++) {
            bytes[i] = binary_string.charCodeAt(i);
        }

        downloadZip(bytes.buffer, projectName);
    }
</script>
}

