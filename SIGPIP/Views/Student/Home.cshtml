@using Newtonsoft.Json
@model List<ProjectModel>

@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_LayoutPortfolio.cshtml";
}

<div class="content-wrapper">

    <section class="content">

        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Add a New Project</h3>

                <ul class="box-controls pull-right">
                    <li><a class="box-btn-slide" href="#"></a></li>
                </ul>
            </div>
            <div class="box-body">

                @{
                    Guid studentId = Guid.Empty, projectId = Guid.Empty;
                }

                @{
                    studentId = Guid.Parse(ViewBag.studentIdLogged);
                }

                <h4 class="mt-0 mb-20">
                    Do you have a new project completed or under development?. Fill in the following fields and store
                    it, so you can access and/or edit it whenever you want.
                </h4>

                <form asp-action="RegisterStudentProject" asp-controller="Project" method="post" enctype="multipart/form-data" novalidate="novalidate">
                    <input type="hidden" name="studentId" value=@studentId />
                    <input type="hidden" name="projectId" id="projectId" value=@projectId />
                    <div class="row">
                        <div class="col-4">
                            <div class="form-group">
                                <label for="projectName">Name <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectName" id="projectName" class="form-control" required data-validation-required-message="This field is required">
                                </div>
                            </div>
                        </div>
                        <div class="col-8">
                            <div class="form-group">
                                <label for="projectDescription">Description <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectDescription" id="projectDescription" class="form-control" required data-validation-required-message="This field is required" maxlength="175">
                                </div>
                                @*<span validation-for="projectDescription" class="text-danger"></span>*@
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectLink">Link to find the project (Optional)</label>
                                <div class="controls">
                                    <input name="projectLink" id="projectLink" class="form-control" placeholder="Add URL"
                                           data-validation-regex-regex="((http[s]?|ftp[s]?):\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*"
                                           data-validation-regex-message="Only Valid URL's">
                                </div>
                                @*<span validation-for="projectLink" class="text-danger"></span>*@
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectRepoLink">Repository link <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectRepoLink" id="projectRepoLink" class="form-control" placeholder="Add URL"
                                           data-validation-regex-regex="((http[s]?|ftp[s]?):\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*"
                                           data-validation-regex-message="Only Valid URL's" required data-validation-required-message="This field is required">
                                </div>
                                @*<span validation-for="projectRepoLink" class="text-danger"></span>*@
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectFramework">Framework or environment used <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectFramework" id="projectFramework" class="form-control" required data-validation-required-message="This field is required">
                                </div>
                                @*<span validation-for="projectFramework" class="text-danger"></span>*@
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label for="projectLanguages">Programming languages used (Separated by comma ",") <span class="text-danger">*</span></label>
                                <div class="controls">
                                    <input name="projectLanguages" id="projectLanguages" class="form-control" required data-validation-required-message="This field is required">
                                </div>
                                @*<span validation-for="projectLanguages" class="text-danger"></span>*@
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <label for="exampleInputFile"><b>Select Image </b><span class="text-danger">*</span></label>
                            <div class="controls">
                                <input type="file" class="form-control" name="files" id="files" accept="image/*">
                            </div>
                            <div style="text-align: center;">
                                <br />
                                <img src="#" id="uploadedImage" width="200" height="100" hidden />
                            </div>
                        </div>
                        <div class="col-6">
                            <label for="exampleInputFile"><b>Choose Zip File </b><span class="text-danger">*</span></label>
                            <div class="controls">
                                <input type="file" class="form-control" name="files" id="zip" accept=".zip,.rar,.7zip">
                            </div>
                        </div>
                    </div>

                    <button type="submit" id="submitProject" class="btn btn-success pull-right">Upload your Project</button><br />
                </form>
                <button onclick="cancelEdit()" id="cancelEditButton" class="btn btn-danger" hidden>Cancel</button>
            </div>
        </div>

        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Your Projects</h3>

                <ul class="box-controls pull-right">
                    <li><a class="box-btn-slide" href="#"></a></li>
                </ul>
            </div>
            <div class="box-body">

                @if (Model.Count == 0)
                {
                    <div style="text-align: center;">
                        <h2>This is very empty!</h2>
                        <h3>*Cricket Sounds*</h3>
                        <h4>
                            To add a new project go to the "Add a New Project" section and start storing and managing
                            all your projects in a quick and easy way.
                        </h4>
                        <img src="https://img.icons8.com/cotton/100/000000/empty-box.png" />
                    </div>
                }
                @{IDictionary<string,int> languagesDict = new Dictionary<string,int>();
                IDictionary<string,int> frameworksDict = new Dictionary<string,int>();}
                @for (int i = 0; i < Model.Count; i++)
                {
                    <div>
                        @{if (frameworksDict.ContainsKey(Model.ElementAt(i).projectFramework))
                        {
                            frameworksDict[Model.ElementAt(i).projectFramework] += 1;
                        }
                        else
                        {
                            frameworksDict.Add(Model.ElementAt(i).projectFramework, 1);
                        }
                        string[] projectLanguages = Model.ElementAt(i).projectLanguages.Split(',');
                        for(int j = 0; j < projectLanguages.Length; j++)
                        {
                            if (languagesDict.ContainsKey(projectLanguages[j]))
                            {
                                languagesDict[projectLanguages[j]] += 1;
                            }
                            else
                            {
                                languagesDict.Add(projectLanguages[j], 1);
                            }
                        }
                        }
                        @{
                            string base64String = Convert.ToBase64String(@Model.ElementAt(i).projectImageData, 0, @Model.ElementAt(i).projectImageData.Length);
                            var imageSource = "data:application/pdf;base64," + base64String;
                        }
                        @{
                            string base64StringZip = Convert.ToBase64String(@Model.ElementAt(i).projectZipData, 0, @Model.ElementAt(i).projectZipData.Length);
                        }
                        @{
                            string jsonObject = JsonConvert.SerializeObject(@Model.ElementAt(i));
                        }
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <div class="container__card">

                                <div class="card__father">
                                    <div class="card">
                                        <div class="card__front" style="background-image: url(@imageSource);">
                                            <div class="bg"></div>
                                            <div class="body__card_front">
                                                @if (@Model.ElementAt(i).projectDescription.Length <= 85)
                                                {
                                                    <h1>@Model.ElementAt(i).projectDescription</h1>
                                                }
                                                else
                                                {
                                                    <h3>@Model.ElementAt(i).projectDescription</h3>
                                                }
                                            </div>
                                        </div>
                                        <div class="card__back">
                                            <div class="body__card_back">
                                                <h1>@Model.ElementAt(i).projectName</h1>
                                                <p>
                                                    @if (@Model.ElementAt(i).projectLink != null)
                                                    {
                                                        <a href="@Model.ElementAt(i).projectLink" target="_blank" rel="noopener noreferrer">Uploaded link</a>

                                                        <br />
                                                    }
                                                    <a href="@Model.ElementAt(i).projectRepoLink" target="_blank" rel="noopener noreferrer">Repository Link</a><br />
                                                <p>@Model.ElementAt(i).projectFramework</p>

                                                <button onclick="base64ToArrayBuffer('@base64StringZip', '@Model.ElementAt(i).projectName')" class="btn btn-info">Download Project ZIP</button><div><br /></div>
                                                <button onclick="editProject('@jsonObject')" class="btn btn-success">Edit</button>

                                                <button onclick="deleteProject('@Model.ElementAt(i).projectId')" class="btn btn-danger">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (i + 1 < Model.Count)
                        {
                            <div>
                                @{
                                    base64String = Convert.ToBase64String(@Model.ElementAt(i + 1).projectImageData, 0, @Model.ElementAt(i + 1).projectImageData.Length);
                                    imageSource = "data:application/pdf;base64," + base64String;
                                }
                                @{
                                    base64StringZip = Convert.ToBase64String(@Model.ElementAt(i + 1).projectZipData, 0, @Model.ElementAt(i + 1).projectZipData.Length);
                                }
                                @{
                                    jsonObject = JsonConvert.SerializeObject(@Model.ElementAt(i + 1));
                                }
                            </div>
                            <div class="col-6">
                                <div class="container__card">

                                    <div class="card__father">
                                        <div class="card">
                                            <div class="card__front" style="background-image: url(@imageSource);">
                                                <div class="bg"></div>
                                                <div class="body__card_front">
                                                    @if (@Model.ElementAt(i + 1).projectDescription.Length <= 100)
                                                    {
                                                        <h1>@Model.ElementAt(i+1).projectDescription</h1>
                                                    }
                                                    else
                                                    {
                                                        <h3>@Model.ElementAt(i+1).projectDescription</h3>
                                                    }
                                                </div>
                                            </div>
                                            <div class="card__back">
                                                <div class="body__card_back">
                                                    <h1>@Model.ElementAt(i+1).projectName</h1>
                                                    <p>
                                                        @if (@Model.ElementAt(i + 1).projectLink != null)
                                                        {
                                                            <a href="@Model.ElementAt(i+1).projectLink" target="_blank" rel="noopener noreferrer">Uploaded link</a>

                                                            <br />
                                                        }
                                                        <a href="@Model.ElementAt(i+1).projectRepoLink" target="_blank" rel="noopener noreferrer">Repository Link</a><br />
                                                    <p>@Model.ElementAt(i+1).projectFramework</p>

                                                    <button onclick="base64ToArrayBuffer('@base64StringZip', '@Model.ElementAt(i+1).projectName')" class="btn btn-info">Download Project ZIP</button><div><br /></div>
                                                    <button onclick="editProject('@jsonObject')" class="btn btn-success">Edit</button>

                                                    <button onclick="deleteProject('@Model.ElementAt(i+1).projectId')" class="btn btn-danger">Delete</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            i++;
                        }
                    </div>
                }
            </div>
        </div>
         <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Your favourite technologies</h3>
                <ul class="box-controls pull-right">
                    <li><a class="box-btn-slide" href="#"></a></li>
                </ul>
            </div>
            <div class="box-body">
                <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                <script type="text/javascript">

                  // Load the Visualization API and the corechart package.
                  google.charts.load('current', {'packages':['corechart']});

                  // Set a callback to run when the Google Visualization API is loaded.
                  google.charts.setOnLoadCallback(drawChart);

                  // Callback that creates and populates a data table,
                  // instantiates the pie chart, passes in the data and
                  // draws it.
                  function drawChart() {
                        
                    // Create the data table.
                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Framework');
                    data.addColumn('number', 'Usages');
                    @for(int i = 0; i < frameworksDict.Count(); i++)
                    {
                        @: data.addRows([["@frameworksDict.ElementAt(i).Key.ToUpper()",@frameworksDict.ElementAt(i).Value]]);
                    }

                    var dataLgs = new google.visualization.DataTable();
                    dataLgs.addColumn('string', 'Languages');
                    dataLgs.addColumn('number', 'Usages');
                    @for(int i = 0; i < languagesDict.Count(); i++)
                    {
                        @: dataLgs.addRows([["@languagesDict.ElementAt(i).Key.ToUpper()",@languagesDict.ElementAt(i).Value]]);
                    }

                    // Set chart options
                    var options = {'title':'Favourite Frameworks', "is3D":true, "fontSize":17, "height":500, "fontName": 'Poppins, sans-serif'};
                    var optionsLgs = {'title':'Favourite Programming Languages',"is3D":true,"fontSize":17,"height":500, "fontName": 'Poppins, sans-serif'};

                    // Instantiate and draw our chart, passing in some options.
                    var chart = new google.visualization.PieChart(document.getElementById('chart_div'));
                    chart.draw(data, options);
                    var chartLgs = new google.visualization.PieChart(document.getElementById('chart_div_Lgs'));
                    chartLgs.draw(dataLgs, optionsLgs);
                  }
                </script>
                <div class="row justify-content-between">
                    <div class="col-6">
                        <div id="chart_div" ></div>
                    </div>
                    <div class="col-6">
                        <div id="chart_div_Lgs" ></div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>


@section scripts {
<script>

    document.getElementById('files').onchange = function(evt){
        var target = evt.target;
        var files = target.files;

        if (FileReader && files && files.length) {
            var fr = new FileReader();
            fr.onload = function () {
                document.getElementById('uploadedImage').removeAttribute('hidden');
                document.getElementById('uploadedImage').src = fr.result;
            }
            fr.readAsDataURL(files[0]);
        }
    }

    function editProject(project){
        var projectToEdit = JSON.parse(project);

        document.getElementById('projectName').setAttribute('value', projectToEdit.projectName);
        document.getElementById('projectDescription').setAttribute('value', projectToEdit.projectDescription);
        document.getElementById('projectLink').setAttribute('value', projectToEdit.projectLink);
        document.getElementById('projectRepoLink').setAttribute('value', projectToEdit.projectRepoLink);
        document.getElementById('projectFramework').setAttribute('value', projectToEdit.projectFramework);
        document.getElementById('projectLanguages').setAttribute('value', projectToEdit.projectLanguages);
        document.getElementById('projectId').setAttribute('value', projectToEdit.projectId);
        document.getElementById('submitProject').setAttribute('value', 'Edit');
        document.getElementById('files').value = "";
        document.getElementById('zip').value = "";
        document.getElementById('cancelEditButton').removeAttribute('hidden');
        document.getElementById('uploadedImage').removeAttribute('hidden');
        document.getElementById('uploadedImage').setAttribute('src', "data:image/png;base64," + projectToEdit.projectImageData);

        $('html, body').animate({ scrollTop: 0 }, 'fast');
    }

    function deleteProject(idProject){
        if (confirm('¿Are you sure you want to delete this project?')) {
            $.ajax({
                type: 'DELETE',
                url: '/Project/DeleteStudentProject',
                data: { projectId: idProject},
                success: function(){
                    window.location.reload();
                }
            })       
        }
    }

    function cancelEdit(){
        console.log("cancel");

        document.getElementById('projectName').setAttribute('value', '');
        document.getElementById('projectDescription').setAttribute('value', '');
        document.getElementById('projectLink').setAttribute('value', '');
        document.getElementById('projectRepoLink').setAttribute('value', '');
        document.getElementById('projectFramework').setAttribute('value', '');
        document.getElementById('projectLanguages').setAttribute('value', '');
        document.getElementById('projectId').setAttribute('value', '');
        document.getElementById('submitProject').setAttribute('value', 'Upload');
        document.getElementById('cancelEditButton').setAttribute('hidden', true);
        document.getElementById('uploadedImage').setAttribute('hidden', true);
        document.getElementById('uploadedImage').setAttribute('src', '');
        console.log("cancel2");
    }

    function downloadZip(zipBytes, projectName){

        let blob = new Blob([zipBytes], { type: 'application/zip, application/octet-stream'['content-type'] });
        let objectUrl = URL.createObjectURL(blob);
        let link = document.createElement('a');

        link.href = objectUrl;
        link.download = projectName +".zip";
        link.click();

        window.URL.revokeObjectURL(link.href);
    }

    function base64ToArrayBuffer(base64, projectName) {
        var binary_string = window.atob(base64);
        var len = binary_string.length;
        var bytes = new Uint8Array(len);

        for (var i = 0; i < len; i++) {
            bytes[i] = binary_string.charCodeAt(i);
        }

        downloadZip(bytes.buffer, projectName);
    }
</script>
}
