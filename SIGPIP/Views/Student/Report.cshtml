@using Newtonsoft.Json
@using System.Globalization
@model List<ProjectModel>


@{
    ViewData["Title"] = "Report";
    Layout = "~/Views/Shared/_LayoutPortfolio.cshtml";
}

<style>
    .card{
        width: 100% !important;
        height: auto !important;
    }

    #curve_values{
        display:flex;
        justify-content: center;
    }
</style>

<div class="content-wrapper">
    
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            Monthly Report
        </h1>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><i class="fas fa-compass"></i> Home</li>
            <li class="breadcrumb-item active">Report</li>
        </ol>
    </section>
    <br />
    <section class="content-header">
        <h2 ><p align="center">
            @DateTime.Now.ToString("MMMM", CultureInfo.CreateSpecificCulture("en-US")).ToUpper()</p>
        </h2>
    </section>
    <!-- Main content -->
    <section class="content" style="min-width: 1500px">
        @{
            IDictionary<string,int> languagesDict = new Dictionary<string,int>();
            IDictionary<string,int> frameworksDict = new Dictionary<string,int>();
            IDictionary<string,int> projectsDict = new Dictionary<string,int>();
            ProjectModel projectCreated = new ProjectModel();
            ProjectModel projectUpdated = new ProjectModel();
            int created = 0;
            int updated = 0;
        }
        @foreach(ProjectModel project in @ViewBag.projects)
        {
            if(projectsDict.Count==0)
            {
                projectsDict.Add(project.projectUploadDate.ToString("MM") + "/" + project.projectUploadDate.ToString("yy"), 1);
                DateTime actualDate = project.projectUploadDate;
                while(actualDate.Month!=DateTime.Now.AddMonths(1).Month || actualDate.Year != DateTime.Now.Year)
                {
                    actualDate=actualDate.AddMonths(1);
                    projectsDict.Add(actualDate.ToString("MM") + "/" + actualDate.ToString("yy"), 0);
                }
            }
            else
            {  
                projectsDict[project.projectUploadDate.ToString("MM") + "/" + project.projectUploadDate.ToString("yy")] += 1;
            }
            if (project.projectUploadDate.Month==DateTime.Now.Month || project.projectLastUpdate.Month==DateTime.Now.Month)
            {
                if (project.projectUploadDate.Month == DateTime.Now.Month)
                {
                    created += 1;
                }
                if (project.projectLastUpdate.Month == DateTime.Now.Month)
                {
                    updated += 1;
                }
                if (frameworksDict.ContainsKey(project.projectFramework))
                {
                    frameworksDict[project.projectFramework] += 1;
                }
                else
                {
                    frameworksDict.Add(project.projectFramework, 1);
                }
                string[] projectLanguages = project.projectLanguages.Split(',');
                for(int i = 0; i < projectLanguages.Length; i++)
                {
                    if (languagesDict.ContainsKey(projectLanguages[i]))
                    {
                        languagesDict[projectLanguages[i]] += 1;
                    }
                    else
                    {
                        languagesDict.Add(projectLanguages[i], 1);
                    }
                }
                if (projectCreated.projectName == null && project.projectUploadDate.Month == DateTime.Now.Month)
                {
                    projectCreated = project;
                }else if(projectCreated.projectUploadDate < project.projectUploadDate && projectCreated.projectName != null)
                {
                    projectCreated = project;
                }
                if (projectUpdated.projectName == null && project.projectLastUpdate.Month == DateTime.Now.Month)
                {
                    projectUpdated = project;
                }else if(projectUpdated.projectLastUpdate < project.projectLastUpdate && projectUpdated.projectName != null)
                {
                    projectUpdated = project;
                }
            }  
        }
        @{
            int projected = 3;
            int months = 0;
            int projectsN = 0;
            if (projectsDict.Count > 2)
            {
                while (projectsDict.Count() - 2 - months!=-1)
                {
                    if (months != 3)
                    {
                        projectsN += (projectsDict.ElementAt(projectsDict.Count() - 2 - months).Value);
                        months += 1;
                    }
                    else
                    {
                        break;
                    }
                }
                projected = projectsN / months;
            }
            projectsDict[DateTime.Now.AddMonths(1).ToString("MM") + "/" + DateTime.Now.AddMonths(1).ToString("yy")]= projected;
        }
        <div class="row justify-content-center">
            <div class="col-6 col-sm-4 col-md-3">
                <div class="card text-white bg-dark m-auto">
                    <div class="card-body">
                        <h2><p align="center">
                            Projects created this month
                            </p>
                        </h2>
                        <h1 style=font-size:80px><p align="center">
                            @created
                            </p>
                        </h1>
                    </div>
                </div>
            </div>
            <div class="col-6 col-sm-4 col-md-3">
                <div class="card text-white bg-dark m-auto">
                    <div class="card-body">
                        <h2><p align="center">
                            Projects updated this month
                            </p>
                        </h2>
                        <h1 style=font-size:80px><p align="center">
                            @updated
                            </p>
                        </h1>
                    </div>
                </div>
            </div>
        </div>
         <div class="row justify-content-center">
             <div class="col-12 col-md-2">
                <div class="card d-flex align-items-stretch">
                    <div class="card-body">
                        <div class="col-12">
                            <div class="card text-white bg-dark">
                                <div class="card-body">
                                    <h2><p align="center">
                                        Projected number of project next month
                                        </p>
                                    </h2>
                                    <h1 style=font-size:80px><p align="center">
                                        @projected
                                        </p>
                                    </h1>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-10">
                <div class="card">
                    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                      <script type="text/javascript">
                        google.charts.load("current", {packages:['corechart']});
                        google.charts.setOnLoadCallback(drawChart);
                        function drawChart() {
                            var data = new google.visualization.DataTable();
                            data.addColumn('string', 'Month');
                            data.addColumn('number', 'Projects');
                            @for(int i = 0; i < projectsDict.Count(); i++)
                            {
                                @: data.addRows([["@projectsDict.ElementAt(i).Key",@projectsDict.ElementAt(i).Value]]);
                            }
                          var options = {
                            width: "100%",
                            height: 400,
                            bar: {groupWidth: "95%"},
                            legend: { position: "none" }, "fontSize":17
                          };
                          var chart = new google.visualization.LineChart(document.getElementById("curve_values"));
                          chart.draw(data, options);
                      }
                      </script>
                    <div class="card-body">
                        <h3 class="card-title" style="background-color:#D9DADB; color:black" align="center">projects created by months</h3>
                        <div id="curve_values"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <div class="card">
                    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                      <script type="text/javascript">
                        google.charts.load("current", {packages:['corechart']});
                        google.charts.setOnLoadCallback(drawChart);
                        function drawChart() {
                            var data = new google.visualization.DataTable();
                            data.addColumn('string', 'Framework');
                            data.addColumn('number', 'Usages');
                            @for(int i = 0; i < frameworksDict.Count(); i++)
                            {
                                @: data.addRows([["@frameworksDict.ElementAt(i).Key.ToUpper()",@frameworksDict.ElementAt(i).Value]]);
                            }
                          var view = new google.visualization.DataView(data);
                          view.setColumns([0, 1,
                                           { calc: "stringify",
                                             sourceColumn: 1,
                                             type: "string",
                                             role: "annotation" }]);

                          var options = {
                            width: "100%",
                            height: 400,
                            bar: {groupWidth: "95%"},
                            legend: { position: "none" }, "fontSize":17
                          };
                          var chart = new google.visualization.ColumnChart(document.getElementById("columnchart_values"));
                          chart.draw(view, options);
                      }
                      </script>
                    <div class="card-body">
                        <h3 class="card-title" style="background-color:#D9DADB; color:black" align="center">Most used frameworks this month</h3>
                        <div id="columnchart_values"></div>
                    </div>
                </div>
            </div>
           <div class="col-lg-6">
                <div class="card">
                    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                    <script type="text/javascript">

                      // Load the Visualization API and the corechart package.
                      google.charts.load('current', {'packages':['corechart']});

                      // Set a callback to run when the Google Visualization API is loaded.
                      google.charts.setOnLoadCallback(drawChart);

                      // Callback that creates and populates a data table,
                      // instantiates the pie chart, passes in the data and
                      // draws it.
                      function drawChart() {

                        // Create the data table.
                        var data = new google.visualization.DataTable();
                        data.addColumn('string', 'Languages');
                        data.addColumn('number', 'Usages');
                        @for(int i = 0; i < languagesDict.Count(); i++)
                        {
                            @: data.addRows([["@languagesDict.ElementAt(i).Key.ToUpper()",@languagesDict.ElementAt(i).Value]]);
                        }
                        // Set chart options
                        var options = {width: "100%",'height': 400,"is3D":true, "fontSize":17};

                        // Instantiate and draw our chart, passing in some options.
                        var chart = new google.visualization.PieChart(document.getElementById('chart_div1'));
                        chart.draw(data, options);
                      }
                    </script>
                    <div class="card-body">
                        <h3 class="card-title" style="background-color:#D9DADB; color:black" align="center">Most used languages this month</h3>
                        <div id="chart_div1"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <div class="card text-dark">
                  <div class="card-header" style="background-color:#D9DADB; color:black">
                        <h3>Latest created project</h3>
                  </div>
                  @{if(projectCreated.projectName != null){       
                     <div class="card-body" style="padding-top:0" >
                        <h1 hidden id="createdProjectLbl">No projects found</h1>
                        <h2>@projectCreated.projectName.ToUpper()</h2>
                        <p class="card-text">@projectCreated.projectDescription</p>
                        <p class="card-text">FRAMEWORK: @projectCreated.projectFramework</p>
                        <p class="card-text">LANGUAGES:´@projectCreated.projectLanguages</p>
                      </div>
                      <div class="card-footer bg-transparent border-grey"style="padding:8px">
                          <h4>CREATED DATE: @projectCreated.projectUploadDate.ToString("dd/MM/yyyy")</h4>
                      </div>
                    }else{
                        <h1  align="center" style="padding:8px">No projects found</h1>
                    }
                   }
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card text-dark">
                  <div class="card-header" style="background-color:#D9DADB; color:black">
                        <h3>Latest updated project</h3>
                  </div>
                  @{if(projectUpdated.projectName != null){       
                     <div class="card-body" style="padding-top:0" >
                        <h2>@projectUpdated.projectName.ToUpper()</h2>
                        <p class="card-text">@projectUpdated.projectDescription</p>
                        <p class="card-text">FRAMEWORK: @projectUpdated.projectFramework</p>
                        <p class="card-text">LANGUAGES:´@projectUpdated.projectLanguages</p>
                      </div>
                      <div class="card-footer bg-transparent border-grey"style="padding:8px">
                          <h4>UPDATED DATE: @projectUpdated.projectLastUpdate.ToString("dd/MM/yyyy")</h4>
                      </div>
                    }else{
                        <h1  align="center" style="padding:8px">No projects found</h1>
                    }
                   }
                </div>
            </div>
        </div>
    </section>
    <!-- /.content -->
</div>